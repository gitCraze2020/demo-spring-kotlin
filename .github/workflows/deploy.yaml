name: Deploy

on: [push]

# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: us-east1-c
  GKE_CLUSTER: cw-cl-demo-spring-kotlin
  IMAGE: demo-spring-kotlin
  REGISTRY_HOSTNAME: gcr.io
  DEPLOYMENT_NAME: demo-spring-kotlin

jobs:
  deploy:
    name: Build and deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@master

#      # download file, run through util base64, set stdout result as secret key
#      - name: Authenticate to GCP
##        uses: actions/gcloud/auth@master
#        uses: actions-hub/gcloud@master
#        env:
#          GCLOUD_AUTH: ${{ secrets.GCP_SA_KEY }}

      #
      - name: Setup gcloud CLI
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '270.0.0'
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_KEY }}

#      - name: Configure Docker for GCR
##        uses: actions/gcloud/cli@master
#        uses: actions-hub/gcloud@master
#        with:
#          args: "auth configure-docker --quiet"

      - name: Configure docker to use the gcloud command-line tool as a credential helper
#        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker
#PUT BACK START
#      - name: Build image
#        uses: actions/setup-java@v1
#        with:
#          java-version: '1.8'
#      - run: ./mvnw compile jib:dockerBuild -Djib.to.image=$REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:${{ github.sha }}
#
#      # Push the Docker image to Google Container Registry
#      - name: Publish (service account must have storage.buckets.create permission, granted through Cloud Storage Admin role)
#        run: |
#          docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:${{ github.sha }}
#PUT BACK END

      - name: Prepare service manifest
        env:
          PROJECT_ID: $GKE_PROJECT
          APP_NAME: demo-spring-kotlin
        run: envsubst < .github/template.yaml > .github/service.yaml

#      - name: Install kubectl and deploy services
#        ##        uses: actions/gcloud/cli@master
#        uses: actions-hub/gcloud@master
#        with:
#          #          args: 'components install kubectl --quiet && gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --project $secrets.GCP_PROJECT }} --zone ${{ secrets.CLUSTER_ZONE }} && kubectl apply -f .github/service.yaml -n ${{ secrets.CLUSTER_NS }}'
#          args: 'gcloud config set container/use_client_certificate True && components install kubectl --quiet && kubectl apply -f .github/service.yaml -n ${{ secrets.CLUSTER_NS }}'

      - name: Install kubectl and deploy services (1)
        ##        uses: actions/gcloud/cli@master
        run: gcloud config set container/use_client_certificate True

      - name: read some folders and vars (1)
        run: ls -la $HOME/

      - name: read some folders and vars (2)
        run: ls -la $HOME/.config

      - name: read some folders and vars (3)
        run: ls -la $HOME/.config/gcloud

      - name: Extract tag
        run: echo "::set-env name=TAG::$(echo ${GITHUB_REF##*/})"

      - name: read github branch tag
        run: echo env.TAG = ${{ env.TAG }}

      - name: read some folders and vars (4b)
        run: ls -la $HOME/work/

      - name: read some folders and vars (4c)
        run: ls -la $HOME/work/demo-spring-kotlin/

      - name: read some folders and vars (5)
        run: echo b. GOOGLE_APPLICATION_CREDENTIALS = $GOOGLE_APPLICATION_CREDENTIALS

      - name: Setup gcloud CLI again
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '270.0.0'
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_KEY }}
          export_default_credentials: true

      - name: read some folders and vars (6)
        run: echo GOOGLE_APPLICATION_CREDENTIALS = $GOOGLE_APPLICATION_CREDENTIALS

      - name: read some folders and vars (7)
        run: ls -la $HOME/work/demo-spring-kotlin/demo-spring-kotlin/

      - name: read some folders and vars (8)
        run: cat $GOOGLE_APPLICATION_CREDENTIALS

      - name: Install kubectl and deploy services (2)
        ##        uses: actions/gcloud/cli@master
        uses: actions-hub/gcloud@master
        with:
          #          args: 'components install kubectl --quiet && gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --project $secrets.GCP_PROJECT }} --zone ${{ secrets.CLUSTER_ZONE }} && kubectl apply -f .github/service.yaml -n ${{ secrets.CLUSTER_NS }}'
          args: 'components install kubectl --quiet'

      - name: Install kubectl and deploy services (3)
        ##        uses: actions/gcloud/cli@master
        uses: actions-hub/gcloud@master
        with:
          #          args: 'components install kubectl --quiet && gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --project $secrets.GCP_PROJECT }} --zone ${{ secrets.CLUSTER_ZONE }} && kubectl apply -f .github/service.yaml -n ${{ secrets.CLUSTER_NS }}'
          args: 'kubectl apply -f .github/service.yaml -n ${{ secrets.CLUSTER_NS }}'

      - name: Install kubectl and deploy services (full)
        ##        uses: actions/gcloud/cli@master
        uses: actions-hub/gcloud@master
        with:
          #          args: 'components install kubectl --quiet && gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --project $secrets.GCP_PROJECT }} --zone ${{ secrets.CLUSTER_ZONE }} && kubectl apply -f .github/service.yaml -n ${{ secrets.CLUSTER_NS }}'
          args: 'gcloud config set container/use_client_certificate True && components install kubectl --quiet && kubectl apply -f .github/service.yaml -n ${{ secrets.CLUSTER_NS }}'


      # Set up kustomize
#      - name: Set up Kustomize
#        run: |
#          curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
#          chmod u+x ./kustomize
#
#      # Deploy the Docker image to the GKE cluster
#      - name: Deploy
#        run: |
#          gcloud config set container/use_client_certificate True
#          ./kustomize edit set image $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:${{ github.sha }}
#          ./kustomize build . | kubectl apply -f -
#          kubectl rollout status deployment/$DEPLOYMENT_NAME
#          kubectl get services -o wide
